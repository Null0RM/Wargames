// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract Deploy {
    event start(address cont);
    constructor() {
        bytes memory data = hex"60805f526101f080600e5f395ff35f5f5060443501606435016084350160a4350160c4350160e43501610104350161012435016101443501610164350161018435016101a435016101c435016101e43501610204350161022435016102443501610264350161028435016102a435016102c435016102e43501610304350161032435016103443501610364350161038435016103a435016103c435016103e43501610404350161042435016104443501610464350161048435016104a435016104c435016104e43501610504350161052435016105443501610564350161058435016105a435016105c435016105e43501610604350161062435016106443501610664350161068435016106a435016106c435016106e43501610704350161072435016107443501610764350161078435016107a435016107c435016107e43501610804350161082435016108443501610864350161088435016108a435016108c435016108e43501610904350161092435016109443501610964350161098435016109a435016109c435016109e43501610a043501610a243501610a443501610a643501610a843501610aa43501610ac43501610ae43501610b043501610b243501610b443501610b643501610b843501610ba43501610bc43501610be43501610c043501610c243501610c443501610c643501610c8435015f5260205ff3";
        address addr;
        assembly {
            addr := create(0, add(data, 32), mload(data))
            let sz := extcodesize(addr)
            if iszero(sz) {
                revert(0, 0)
            }
        }
        emit start(addr);
    }
}
// 0xe9D88c5B0195B07c62003a03ED976A5E445219Ea